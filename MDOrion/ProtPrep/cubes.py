# (C) 2019 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

import traceback

from cuberecord import OERecordComputeCube

from MDOrion.Standards import Fields

from floe.api import parameter


class ProteinSetting(OERecordComputeCube):
    title = "Protein Setting"
    version = "0.1.0"
    classification = [["Protein Preparation", "OEChem"]]
    tags = ['OEChem']
    description = """
    This cube is currently used just to check that one
    protein as provided as system input to perform MD. A
    cube parameter can be set to change this behaviour but currently
    multiple protein are not supported by other MD cubes and the user 
    currently have not to set this parameter. A field record 
    title is also generated by using the protein name 

    Input:
    -------
    oechem.OEDataRecord - Streamed-in of a single protein system

    Output:
    -------
    oechem.OEDataRecord - Streamed-out of a single protein
    """

    # Override defaults for some parameters
    parameter_overrides = {
        "memory_mb": {"default": 2000},
        "spot_policy": {"default": "Prohibited"},
        "prefetch_count": {"default": 1},  # 1 molecule at a time
        "item_count": {"default": 1}  # 1 molecule at a time
    }

    multiple_protein = parameter.BooleanParameter(
        'multiple_protein',
        default=False,
        help_text="If Checked/True multiple protein will be allowed")

    protein_prefix = parameter.StringParameter(
        'protein_prefix',
        default='PRT',
        help_text='Protein prefix used to identify the protein'
    )

    def begin(self):
        self.opt = vars(self.args)
        self.opt['Logger'] = self.log
        self.count=0

    def process(self, record, port):
        try:

            if self.count > 0 and not self.opt['multiple_protein']:
                raise ValueError("Multiple Proteins have been Detected")

            if not record.has_value(Fields.primary_molecule):
                raise ValueError("Missing Primary Molecule field")

            protein = record.get_value(Fields.primary_molecule)

            name = protein.GetTitle()[0:12]
            if not name:
                name = self.opt['protein_prefix']

            record.set_value(Fields.title, name)
            record.set_value(Fields.id, self.count)
            self.count += 1

            self.success.emit(record)

        except:
            self.log.error(traceback.format_exc())
            # Return failed record
            self.failure.emit(record)